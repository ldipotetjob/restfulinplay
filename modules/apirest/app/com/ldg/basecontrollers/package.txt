package com.ldg.basecontrollers


=============== Important aspect above different classes/traits =================


==== trait ContentNegotiation ===>

===> For Content Negotiation this PoC we check only :

     Content-type
     Accept

    A perfect design should take this best practices:

        - Content-type
        - Accept
        - Accept-Encoding
        - Accept-Language
        - Cache-Control => it's really important basically when you retrieve information from databases

        * Right Response Code and of course a good handle negotiation failure

===> For TypeErasure:
     For solving type erasure problem tha JVM have we use this parammeter tag: ClassTag[C].
     If this problem is NOT familiar for you please check:
     https://docs.oracle.com/javase/tutorial/java/generics/erasure.html

     In TypeErasure basically the compiler removes all generic type information after compilation.
     This means that we are not able to differentiate between, for example Seq[Int] and Seq[String] at runtime.

     So ClassTag[C] will maintain our type. Any way if you are an eaguer reader here there are a reference about
     different way of treat this problem in scala:
     https://docs.scala-lang.org/overviews/reflection/typetags-manifests.html

===> self : Controller => :
     For solving the problem that mix a trait in other trait. In this case we need to use objects and functions
     from trait Controller.It is a way to narrow the trait Controller to my customized ContentNegotiation.

     ref: https://docs.scala-lang.org/tour/self-types.html

==== ControllerComponents ===>

     === class DefaultActionBuilder ===>

         Custom action builder for process GET requests, if content-type is Ok the action builder will process the
         request if don't find the error and return an answer explaining it. The idea is that you can add more
         validation about the request if you want.

     === class JsonActionBuilder    ===>

         Custom action builder to process POST requests, if the content-type is OK, check if the body can be parsed,
         it means that the json body can be parsed to a custom model. If every thing goes well, the request will be
         processed, otherwise, will find the error and return a response explaining it.
         The idea is that you can add more validations for the POST request (body, content-type, etc.).

     === case class DefaultControllerComponents ===>

         Follow the pattern of the controllers that manage the action so we inject de actions into controllers.
         ref: https://www.playframework.com/documentation/2.6.x/ScalaActionsComposition#custom-action-builders

==== class BaseController ===>

         Custom action builder[JsonAction] to process POST requests, if the content-type is OK, check if the body can be parsed,
         THE MOST IMPORTANT ASPECT HERE is that the json body IS GENERIC so it can process any POST REQUEST if you can
         supply an specific valid reader (READ[T], where T is the type of the json modeled body). If every thing goes well,
         the request will be processed, otherwise, will find the error and return a response explaining it.
         The idea is that you can add more validations for the POST request (body, content-type, etc.).
