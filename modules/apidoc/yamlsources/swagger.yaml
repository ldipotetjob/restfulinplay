swagger: "2.0"
info:
  description: "This is a sample server Petstore server.  You can find out more about     Swagger at [http://swagger.io](http://swagger.io) or on [irc.freenode.net, #swagger](http://swagger.io/irc/).      For this sample, you can use the api key `special-key` to test the authorization     filters."
  version: "1.0.0"
  title: "Football Api League"
  termsOfService: "own page abou term of service"
  contact:
    email: "ldipotet.job@gmail.com"
  license:
    name: "Apache 2.0"
    url: "http://www.apache.org/licenses/LICENSE-2.0.html"
host: "localhost:9000"
basePath: "/apirest"
tags:
- name: "premier"
  description: "Football api proof of concept"
  externalDocs:
    description: "Find out more Play Framework proof of Concept"
    url: "http://github.com/ldipotetjob"
schemes:
- "http"
paths:
  /premier/matchs:
    get:
      tags:
      - "premier"
      summary: "Return all fotball matchs"
      description: "Get all result footbal season from the beginning"
      operationId: "getMatchGame"
      consumes:
      - "text/plain; charset=utf-8"
      produces:
      - "application/json"
      - "text/csv"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Premier"
        400:
          description: "Bad Request"
        403:
          description: "Forbidden"
        406:
          description: "Not Acceptable Status Value"
        500:
          description: "Internal Server Error"
      security:
      - petstore_auth:
        - "write:pets"
        - "read:pets"

securityDefinitions:
  petstore_auth:
    type: "oauth2"
    authorizationUrl: "http://petstore.swagger.io/oauth/dialog"
    flow: "implicit"
    scopes:
      write:pets: "writte-for testing security on swagger"
      read:pets: "read-for testing security on swagger"
  api_key:
    type: "apiKey"
    name: "api_key"
    in: "header"
definitions:
  Premier:
    type: "object"
    required:
    - "date"
    - "season"
    - "homeTeam"
    - "awayTeam"
    properties:
      homeTeam:
        $ref: "#/definitions/TemplateTeam"
      awayTeam:
        $ref: "#/definitions/TemplateTeam"
      date:
        type: "string"
        example: "my_date"
      season:
        type: "string"
        example: "weak day"
  TemplateTeam:
    type: "object"
    required:
    - "name"
    - "goals"
    - "goalsPlayer"
    properties:
      goalsPlayer:
        $ref: "#/definitions/GoalsPlayer"
      name:
        type: "string"
        example: "TeamName"
      goals:
        type: "integer"
        format: "int32"
  GoalsPlayer:
    type: object
    additionalProperties:
      $ref: "#/definitions/Minutes_Goals"
  Minutes_Goals:
    type: array
    items:
      type: string
externalDocs:
  description: "Find out more Play Framework proof of Concept"
  url: "http://github.com/ldipotetjob"